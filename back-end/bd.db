
create schema dbs_hackathon;
use dbs_hackathon;

CREATE TABLE tbl_clientes (
    id_cliente int auto_increment,
    documento varchar(11) not null unique,
    primer_nombre varchar(50) not null,
    segundo_nombre varchar(50),
	primer_apellido varchar(50) not null,
    segundo_apellido varchar(50),
    direccion varchar(255) not null,
    contacto varchar(10) not null,
    detalle_cuenta TEXT,
    primary key(id_cliente)
);

create table tbl_rol(
	id_rol tinyint unsigned auto_increment,
    descripcion varchar(20) not null,
    primary key(id_rol)
);

insert into tbl_rol (descripcion)
values('admin'),('cliente');


CREATE TABLE tbl_usuarios (
    id_usuario int auto_increment,
    usuario varchar(50) not null unique,
    contrasenha varchar(20) not null,
    fk_id_tbl_clientes int not null,
    fk_id_tbl_rol tinyint unsigned not null,
    primary key(id_usuario),
    foreign key (fk_id_tbl_rol) references tbl_rol(id_rol),
    foreign key (fk_id_tbl_clientes) references tbl_clientes(id_cliente)
);

delimiter //
create trigger cliente_usuario after insert on tbl_clientes
for each row
begin
	declare usuario_new varchar(50);
    declare usuario_old varchar(50);
    set usuario_new = concat(new.primer_nombre, '.', new.primer_apellido);
    set usuario_old = (select usuario from tbl_usuarios where usuario = usuario_new);

	if usuario_new = usuario_old then
		insert into tbl_usuarios(usuario, contrasenha, fk_id_tbl_clientes, fk_id_tbl_rol) 
		values (concat(usuario_new,'', new.documento), new.documento, new.id_cliente, 2);
	else
		insert into tbl_usuarios(usuario, contrasenha, fk_id_tbl_clientes, fk_id_tbl_rol) 
		values (usuario_new, new.documento, new.id_cliente, 2);
	end if;
end//
delimiter ;

create table tbl_servicios(
	id_servicio tinyint unsigned auto_increment,
	nombre varchar(255) not null,
	descripcion text,
	valor decimal(10,2) not null,
	fecha_inicio date not null,
	fecha_fin date,
    primary key(id_servicio)
);

create table tbl_factura(
	id_factura int unsigned auto_increment,
	fecha_factura timestamp default current_timestamp(),
	fk_id_tbl_cliente int not null, 
    fk_id_tbl_usuario int not null,
	total decimal(10,2) not null,
    primary key(id_factura),
    foreign key(fk_id_tbl_cliente) references tbl_clientes(id_cliente),
    foreign key(fk_id_tbl_usuario) references tbl_usuarios(id_usuario)
);

create table tbl_det_factura(
	id_detalle int unsigned auto_increment,
	fk_id_tbl_factura int unsigned not null,
	fk_id_tbl_servicio tinyint unsigned not null,
	cantidad tinyint not null,
	valor_unitario decimal(10,2) not null,
	iva decimal(10,2) not null,
	descuentos decimal(10,2) not null,
	subtotal decimal(10,2) not null,
	primary key(id_detalle),
    foreign key(fk_id_tbl_factura) references tbl_factura(id_factura),
    foreign key(fk_id_tbl_servicio) references tbl_servicios(id_servicio)
);

create table tbl_area(
	id_area tinyint unsigned auto_increment,
    descripcion varchar(255) not null,
    fk_id_tbl_servicio tinyint unsigned not null,
    primary key(id_area),
    foreign key(fk_id_tbl_servicio) references tbl_servicios(id_servicio)
);

create table tbl_tickets(
	id_ticket int auto_increment,
	fk_id_tbl_cliente int not null,
	fk_id_tbl_area tinyint unsigned not null,
	detalles text,
	fecha timestamp default current_timestamp(),
	primary key(id_ticket),
    foreign key(fk_id_tbl_cliente) references tbl_clientes(id_cliente),
    foreign key(fk_id_tbl_area) references tbl_area(id_area)
);


create table tbl_tecnicos(
	id_tecnico int auto_increment,
	documento varchar(11) not null unique,
	primer_nombre varchar(50) not null,
	segundo_nombre varchar(50),
	primer_apellido varchar(50) not null,
	segundo_apellido varchar(50),
	direccion varchar(255) not null,
	contacto varchar(10) not null,
    fk_id_tbl_rol tinyint unsigned not null,
    fk_id_tbl_area tinyint unsigned not null,
	detalle_cuenta TEXT,
    primary key(id_tecnico),
	foreign key (fk_id_tbl_rol) references tbl_rol(id_rol),
    foreign key (fk_id_tbl_area) references tbl_area(id_area)
);

